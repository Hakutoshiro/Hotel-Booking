#ROUTES:
    Install react-router-dom using npm add react-router-dom.
    Import {Routes,Route} from "react-router-dom" in pages where we are using the routes to route to that page.
    Import  { BrowserRouter } from 'react-router-dom' in main.jsx file and add <BrowserRouter> tag and place used components in between that tag.
    Use Link tag with 'to' property to assign the path to that link of  the component.

#Outlet:
    Import {Outlet} from "react-outlet-dom" in the components where we are setting the layout of every component with some common layout like header and footer.
    Declare route to outlet in the page where we are using the routes and basically every component inside that route tag will replace the outlet of layout.


#installing nodemon - npm i --save-dev nodemon
#in package.json add script with key 'devStart' and value ' nodemon javascript.js '
#to execute- npm run devStart

#mongoose is the package that we are using to connect to mongodb database

DATABASE CONNECTIVITY AND EXPORTING CREATED MODEL OF COLLECTION OF MONGODB:
To connect to database, we need to use mongoose->to use mongoose we use 'const mongoose=require('mongoose')'->then to create connection to mongodb we use
'mongoose.connect(URLtoMongodb)' ->this is how connection is established to mongodb.For collection we need to define the collection and for that
collection we need to define the schema of the collection-> for defining schema we first check whether mongoose is made required(imported)or not.
->after importing mongoose we will either use 'const Schemaname = new mongoose.Schema({ ...declare your schema here...})' or we will 
first destructure 'const {Schema} =mongoose;'then use 'const Schemaname = new Schema({ ...declare your schema here...})'.
->Now we will create model using 'const ModelName= mongoose.model('ModelName',Schema)' e.g.const UserModel = mongoose.model('User',UserSchema).
->Now we will export the model using 'module.exports = UserModel' 


To use the model created using schema, we will import the model using 'const ModelName =require('path to model.js')'
->then to send data to database or create a document of that collection we will use 'ModelName.create({key value pairs.})


Using bcryptjs to encrypt the passwords:
to use bcryptjs,first we will import it using 'const bcrypt=require('bcryptjs')'



useEffect() = React Hook that tells React DO SOME CODE WHEN (pick one):
	This component re-renders
	This component mounts
	The state of a value
useEffect(function, [dependencies])
1. useEffect(() => {})			//Runs after every re-render
2. useEffect(() => {}, [])		//Runs only on mount
3. useEffect(() => {}, [value]) 	//Runs on mount + when value changes 
USES
#1 Event Listeners
#2 DOM manipulation
#3 Subscriptions (real-time updates)
#4 Fetching Data from an API
#5 Clean up when a component unmounts


useContext() = React Hook that allows you to share values between multiple levels of components without passing props through each level
PROVIDER COMPONENT
1. import {createContext} from 'react';
2. export const MyContext = createContext();
3. <MyContext.Provider value={value}>
	<Child />
   </MyContext.Provider>
CONSUMER COMPONENTS
1. import React, { useContext } from 'react';
   import { MyContext } from './ComponentA';
2. const value = useContext(MyContext);



useRef() = "use Reference" Does not cause re-renders when its value changes. When you want a component to "remember" some information, but you don't want that information to trigger new renders.
1. Accessing/Interacting with DOM elements
2. Handling Focus, Animations, and Transitions
3. Managing Timers and Intervals


MongoDB:
	Display:
		find() //displays all collections.
	Insertion:
		insertOne(obj) //inserts one object or document.
		insertMany([obj1,obj2,.....]) //inserts multiple documents or 		objs.
		